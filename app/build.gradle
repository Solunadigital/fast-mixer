apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs'

def abiFiltersForWrapScript = []
def SupportedABIs = ['armeabi-v7a']

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.bluehub.fastmixer"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++14 -frtti -fexceptions"
                abiFilters.addAll( SupportedABIs )
            }
        }
    }

    buildTypes {
        debug {
            externalNativeBuild {
                cmake {
                    if (rootProject.ext.useASAN)
                        arguments "-DUSEASAN=ON"
                }
            }
            packagingOptions {
                doNotStrip "**.so"
                if (rootProject.ext.useASAN && abiFiltersForWrapScript) {
                    def exclude_abis = ["armeabi", "armeabi-v7a", "arm64-v8a", "x86", "x86_64", "mips", "mips64"]
                            .findAll { !(it in abiFiltersForWrapScript) }
                            .collect { "**/" + it + "/wrap.sh" }
                    excludes += exclude_abis
                }
            }

            if (rootProject.ext.useASAN) {
                sourceSets {
                    main {
                        jniLibs {
                            srcDir {
                                "wrap_add_dir/libs"
                            }
                        }
                        resources {
                            srcDir {
                                "wrap_add_dir/res"
                            }
                        }
                    }
                }
            }
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }

    splits {
        abi {
            enable true
            reset()
            include SupportedABIs.join(", ")
            universalApk false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.core:core-ktx:$core_ktx_version"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "androidx.test.ext:junit:$ext_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"

    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_extensions_version"
    implementation "androidx.legacy:legacy-support-v4:$legacy_support_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_viewmodel_ktx_version"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_android_version"

    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_fragment_ktx_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_ui_ktx_version"

    implementation "com.jakewharton.timber:timber:$timber_version"

    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_compiler_version"

    implementation "com.github.Armen101:AudioRecordView:$audio_record_view_version"
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith('generate')) {
        if(rootProject.ext.useASAN)
            task.dependsOn createWrapScriptAddDir
    }
}

task deleteASAN(type: Delete) {
    delete 'wrap_add_dir'
}

clean.dependsOn(deleteASAN)

static def writeWrapScriptToFullyCompileJavaApp(wrapFile, abi) {
    if(abi == "armeabi" || abi == "armeabi-v7a")
        abi = "arm"
    if(abi == "arm64-v8a")
        abi = "aarch64"
    wrapFile.withWriter { writer ->
        writer.write('#!/system/bin/sh\n')
        writer.write('HERE="$(cd "$(dirname "$0")" && pwd)"\n')
        writer.write('export ASAN_OPTIONS=log_to_syslog=false,allow_user_segv_handler=1\n')
        writer.write('export ASAN_ACTIVATION_OPTIONS=include_if_exists=/data/local/tmp/asan.options.b\n')
        writer.write("export LD_PRELOAD=\$HERE/libclang_rt.asan-${abi}-android.so\n")
        writer.write('\$@\n')
    }
}

task copyASANLibs(type:Copy) {
    def libDir = file("$rootProject.ext.ndkDir").absolutePath + "/toolchains/llvm/prebuilt/"
    for (String abi : SupportedABIs) {
        def dir = new File("app/wrap_add_dir/libs/" + abi)
        dir.mkdirs()
        if(abi == 'armeabi-v7a' || abi == 'armeabi')
            abi = "arm"
        if(abi == "arm64-v8a")
            abi = "aarch64"
        FileTree tree = fileTree(dir: libDir).include("**/*asan*${abi}*.so")
        tree.each { File file ->
            from file
            into dir.absolutePath
        }
    }
}

task createWrapScriptAddDir(dependsOn: copyASANLibs) {
    for (String abi : SupportedABIs) {
        def dir = new File("app/wrap_add_dir/res/lib/" + abi)
        dir.mkdirs()
        def wrapFile = new File(dir, "wrap.sh")
        writeWrapScriptToFullyCompileJavaApp(wrapFile, abi)
        println "write file " + wrapFile.path
    }
}